import com.example.utils.CONNECTORS;
import com.example.utils.PARAMETERS_T;
import com.example.utils.Point;
import com.example.Main;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.List;

public class MainTest {

    @Test
    @DisplayName("mainTest1: DECIDE() positive test")
    public void mainTest1() {

        PARAMETERS_T parameters = new PARAMETERS_T();
        List<Point> points = Arrays.asList(
                new Point(0, 0), new Point(2, 3), new Point(5, 10),
                new Point(1, 0), new Point(-2, -3), new Point(-5, 10),
                new Point(2, 2),
                new Point(6, 0),
                new Point(2, 0),
                new Point(2, 3),
                new Point(3, 4),
                new Point(5, 1),
                new Point(5, 6),
                new Point(6, 8),
                new Point(10, 4),
                new Point(8, 1),
                new Point(9, 6)
        );

        CONNECTORS[][] LCM = {
                {CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ANDD,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED}
        };
        boolean[] PUV = {true, true, true, true, true, false, false, false, false, false, false, false, true, true, false};
        Main interceptor = new Main(parameters, points, LCM, PUV);
        Assertions.assertTrue(interceptor.DECIDE());

    }

    @Test
    @DisplayName("mainTest2: DECIDE() negative test")
    public void mainTest2() {
        // test 2
        PARAMETERS_T parameters2 = new PARAMETERS_T();
        List<Point> points2 = Arrays.asList(
                new Point(0, 0),
                new Point(2, 3),
                new Point(5, 10),
                new Point(1, 0),
                new Point(-2, -3),
                new Point(-5, 10),
                new Point(2, 2),
                new Point(6, 0),
                new Point(2, 0),
                new Point(2, 3),
                new Point(3, 4),
                new Point(5, 1),
                new Point(5, 6),
                new Point(6, 8),
                new Point(10, 4),
                new Point(8, 1),
                new Point(9, 6)
        );
        parameters2.LENGTH1 = 1000;

        CONNECTORS[][] LCM2 = {
                {CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ANDD,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED}
        };
        boolean[] PUV2 = {true, true, false, true, true, true, true, false, true, false, false, false, true, false, false};
        Main interceptor2 = new Main(parameters2, points2, LCM2, PUV2);
        Assertions.assertFalse(interceptor2.DECIDE());
    }

    @Test
    @DisplayName("mainTest3: DECIDE() negative test")
    public void mainTest3() {
        // test 3 for false PUM by LCM
        PARAMETERS_T parameters2 = new PARAMETERS_T();
        List<Point> points2 = Arrays.asList(
                new Point(0, 0),
                new Point(2, 3),
                new Point(5, 10),
                new Point(1, 0),
                new Point(-2, -3),
                new Point(-5, 10),
                new Point(2, 2),
                new Point(6, 0),
                new Point(2, 0),
                new Point(2, 3),
                new Point(3, 4),
                new Point(5, 1),
                new Point(5, 6),
                new Point(6, 8),
                new Point(10, 4),
                new Point(8, 1),
                new Point(9, 6)
        );

        CONNECTORS[][] LCM2 = {
                {CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ANDD,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.ANDD, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ANDD,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.ANDD, CONNECTORS.NOTUSED,CONNECTORS.ANDD, CONNECTORS.NOTUSED},
                {CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.ORR,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.ANDD,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.ANDD,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED},
                {CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED,CONNECTORS.NOTUSED, CONNECTORS.NOTUSED}
        };
        boolean[] PUV2 = {true, true, false, true, true, true, true, false, true, false, false, false, true, false, false};
        Main interceptor2 = new Main(parameters2, points2, LCM2, PUV2);
        Assertions.assertFalse(interceptor2.DECIDE());
    }
}
